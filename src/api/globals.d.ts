/* tslint:disable */
/* eslint-disable */
/**
 * TechCenter.Api | v1 - version 1.0.0
 *
 *
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova'
import type { $$userConfigMap, alovaInstance } from './index'
import type apiDefinitions from './apiDefinitions'

type CollapsedAlova = typeof alovaInstance
type UserMethodConfigMap = typeof $$userConfigMap

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<
            Responded,
            any,
            RequestConfig,
            Response,
            ResponseHeader,
            L1Cache,
            L2Cache,
            SE
          >,
          any,
          Responded
        >,
        'params'
      >
    : never

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never

export interface RegisterRequest {
  name: string
  email: string
  password: string
}
export interface LoginRequest {
  email: string
  password: string
}
export interface RefreshTokenRequest {
  refreshToken: string
}
export interface LogoutRequest {
  userId: number
  refreshToken: string | null
}
export type GetUserInfoRequest = object
export type GetAllPostRequest = object
export type GetAllVideoRequest = object
export interface GetPostByIdRequest {
  id?: number
}
export interface GetVideoByIdRequest {
  id?: number
}
export type Type = number
export interface ContentTypeAndId {
  type?: number
  id?: number
}
export type FileResourceDto = {
  id?: number
  fileName?: string
  storageKey?: string
  ownerId?: number
  contents?: ContentTypeAndId[]
  providerId?: number
  size?: number
} | null
export interface IdAndNameDto {
  id: number
  name: string
}
export interface PostForEditDto {
  content?: string
  id?: number
  title?: string
  cover?: FileResourceDto
  summary?: string
  authors?: IdAndNameDto[]
  categories?: null[]
  tags?: null[]
  timeWillUsed?: number
}
export interface FileResourceDto2 {
  id?: number
  fileName?: string
  storageKey?: string
  ownerId?: number
  contents?: ContentTypeAndId[]
  providerId?: number
  size?: number
}
export interface VideoForEditDto {
  videoFile?: FileResourceDto2
  id?: number
  title?: string
  cover?: FileResourceDto
  summary?: string
  authors?: IdAndNameDto[]
  categories?: null[]
  tags?: null[]
  timeWillUsed?: number
}
export interface DeletePostByIdRequest {
  id?: number
}
export interface DeleteVideoByIdRequest {
  id?: number
}
export type IFormFile = Blob
export interface ApiResultOfObject {
  code?: number
  message: string
  data?: null
}
export interface BasicUserInfoDto {
  id?: number
  name?: string
  nickName?: string
  email?: string
  roles?: string[]
}
export type LoginResponse = {
  accessToken: string
  refreshToken: string
  userInfo: BasicUserInfoDto
} | null
export interface ApiResultOfLoginResponse {
  code?: number
  message: string
  data?: LoginResponse
}
export type RefreshTokenResponse = {
  accessToken: string
  refreshToken: string
} | null
export interface ApiResultOfRefreshTokenResponse {
  code?: number
  message: string
  data?: RefreshTokenResponse
}
export type BasicUserInfoDto2 = {
  id?: number
  name?: string
  nickName?: string
  email?: string
  roles?: string[]
} | null
export interface ApiResultOfBasicUserInfoDto {
  code?: number
  message: string
  data?: BasicUserInfoDto2
}
declare global {
  interface Apis {
    Auth: {
      /**
       * ---
       *
       * [POST] register
       *
       * **path:** /api/auth/register
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   name: string
       *   email: string
       *   password: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   message: string
       *   data?: null
       * }
       * ```
       */
      register<
        Config extends Alova2MethodConfig<ApiResultOfObject> & {
          data: RegisterRequest
        }
      >(
        config: Config
      ): Alova2Method<ApiResultOfObject, 'Auth.register', Config>
      /**
       * ---
       *
       * [POST] login
       *
       * **path:** /api/auth/login
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   email: string
       *   password: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   message: string
       *   data?: {
       *     accessToken: string
       *     refreshToken: string
       *     userInfo: {
       *       id?: number
       *       name?: string
       *       nickName?: string
       *       email?: string
       *       // [items] start
       *       // [items] end
       *       roles?: string[]
       *     }
       *   } | null
       * }
       * ```
       */
      login<
        Config extends Alova2MethodConfig<ApiResultOfLoginResponse> & {
          data: LoginRequest
        }
      >(
        config: Config
      ): Alova2Method<ApiResultOfLoginResponse, 'Auth.login', Config>
      /**
       * ---
       *
       * [POST] refreshToken
       *
       * **path:** /api/auth/refresh
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   refreshToken: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   message: string
       *   data?: {
       *     accessToken: string
       *     refreshToken: string
       *   } | null
       * }
       * ```
       */
      refreshToken<
        Config extends Alova2MethodConfig<ApiResultOfRefreshTokenResponse> & {
          data: RefreshTokenRequest
        }
      >(
        config: Config
      ): Alova2Method<ApiResultOfRefreshTokenResponse, 'Auth.refreshToken', Config>
      /**
       * ---
       *
       * [POST] logout
       *
       * **path:** /api/auth/logout
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   userId: number
       *   refreshToken: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   message: string
       *   data?: null
       * }
       * ```
       */
      logout<
        Config extends Alova2MethodConfig<ApiResultOfObject> & {
          data: LogoutRequest
        }
      >(
        config: Config
      ): Alova2Method<ApiResultOfObject, 'Auth.logout', Config>
    }
    techCenterApi: {
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/user/basicInfo
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   code?: number
       *   message: string
       *   data?: {
       *     id?: number
       *     name?: string
       *     nickName?: string
       *     email?: string
       *     // [items] start
       *     // [items] end
       *     roles?: string[]
       *   } | null
       * }
       * ```
       */
      post_api_user_basic_info<
        Config extends Alova2MethodConfig<ApiResultOfBasicUserInfoDto> & {
          data: GetUserInfoRequest
        }
      >(
        config: Config
      ): Alova2Method<ApiResultOfBasicUserInfoDto, 'techCenterApi.post_api_user_basic_info', Config>
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/content/posts/getAll
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = null
       * ```
       */
      post_api_content_posts_get_all<
        Config extends Alova2MethodConfig<null> & {
          data: GetAllPostRequest
        }
      >(
        config: Config
      ): Alova2Method<null, 'techCenterApi.post_api_content_posts_get_all', Config>
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/content/videos/getAll
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = object
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = null
       * ```
       */
      post_api_content_videos_get_all<
        Config extends Alova2MethodConfig<null> & {
          data: GetAllVideoRequest
        }
      >(
        config: Config
      ): Alova2Method<null, 'techCenterApi.post_api_content_videos_get_all', Config>
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/content/posts/getById
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = null
       * ```
       */
      post_api_content_posts_get_by_id<
        Config extends Alova2MethodConfig<null> & {
          data: GetPostByIdRequest
        }
      >(
        config: Config
      ): Alova2Method<null, 'techCenterApi.post_api_content_posts_get_by_id', Config>
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/content/videos/getById
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = null
       * ```
       */
      post_api_content_videos_get_by_id<
        Config extends Alova2MethodConfig<null> & {
          data: GetVideoByIdRequest
        }
      >(
        config: Config
      ): Alova2Method<null, 'techCenterApi.post_api_content_videos_get_by_id', Config>
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/content/posts/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   id?: number
       *   title?: string
       *   cover?: {
       *     id?: number
       *     fileName?: string
       *     storageKey?: string
       *     ownerId?: number
       *     // [items] start
       *     // [items] end
       *     contents?: Array<{
       *       type?: number
       *       id?: number
       *     }>
       *     providerId?: number
       *     size?: number
       *   } | null
       *   summary?: string
       *   // [items] start
       *   // [items] end
       *   authors?: Array<{
       *     id: number
       *     name: string
       *   }>
       *   // [items] start
       *   // [items] end
       *   categories?: null[]
       *   // [items] start
       *   // [items] end
       *   tags?: null[]
       *   timeWillUsed?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = null
       * ```
       */
      post_api_content_posts_add<
        Config extends Alova2MethodConfig<null> & {
          data: PostForEditDto
        }
      >(
        config: Config
      ): Alova2Method<null, 'techCenterApi.post_api_content_posts_add', Config>
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/content/videos/add
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   videoFile?: {
       *     id?: number
       *     fileName?: string
       *     storageKey?: string
       *     ownerId?: number
       *     // [items] start
       *     // [items] end
       *     contents?: Array<{
       *       type?: number
       *       id?: number
       *     }>
       *     providerId?: number
       *     size?: number
       *   }
       *   id?: number
       *   title?: string
       *   cover?: {
       *     id?: number
       *     fileName?: string
       *     storageKey?: string
       *     ownerId?: number
       *     // [items] start
       *     // [items] end
       *     contents?: Array<{
       *       type?: number
       *       id?: number
       *     }>
       *     providerId?: number
       *     size?: number
       *   } | null
       *   summary?: string
       *   // [items] start
       *   // [items] end
       *   authors?: Array<{
       *     id: number
       *     name: string
       *   }>
       *   // [items] start
       *   // [items] end
       *   categories?: null[]
       *   // [items] start
       *   // [items] end
       *   tags?: null[]
       *   timeWillUsed?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = null
       * ```
       */
      post_api_content_videos_add<
        Config extends Alova2MethodConfig<null> & {
          data: VideoForEditDto
        }
      >(
        config: Config
      ): Alova2Method<null, 'techCenterApi.post_api_content_videos_add', Config>
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/content/posts/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   content?: string
       *   id?: number
       *   title?: string
       *   cover?: {
       *     id?: number
       *     fileName?: string
       *     storageKey?: string
       *     ownerId?: number
       *     // [items] start
       *     // [items] end
       *     contents?: Array<{
       *       type?: number
       *       id?: number
       *     }>
       *     providerId?: number
       *     size?: number
       *   } | null
       *   summary?: string
       *   // [items] start
       *   // [items] end
       *   authors?: Array<{
       *     id: number
       *     name: string
       *   }>
       *   // [items] start
       *   // [items] end
       *   categories?: null[]
       *   // [items] start
       *   // [items] end
       *   tags?: null[]
       *   timeWillUsed?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = null
       * ```
       */
      post_api_content_posts_update<
        Config extends Alova2MethodConfig<null> & {
          data: PostForEditDto
        }
      >(
        config: Config
      ): Alova2Method<null, 'techCenterApi.post_api_content_posts_update', Config>
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/content/videos/update
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   videoFile?: {
       *     id?: number
       *     fileName?: string
       *     storageKey?: string
       *     ownerId?: number
       *     // [items] start
       *     // [items] end
       *     contents?: Array<{
       *       type?: number
       *       id?: number
       *     }>
       *     providerId?: number
       *     size?: number
       *   }
       *   id?: number
       *   title?: string
       *   cover?: {
       *     id?: number
       *     fileName?: string
       *     storageKey?: string
       *     ownerId?: number
       *     // [items] start
       *     // [items] end
       *     contents?: Array<{
       *       type?: number
       *       id?: number
       *     }>
       *     providerId?: number
       *     size?: number
       *   } | null
       *   summary?: string
       *   // [items] start
       *   // [items] end
       *   authors?: Array<{
       *     id: number
       *     name: string
       *   }>
       *   // [items] start
       *   // [items] end
       *   categories?: null[]
       *   // [items] start
       *   // [items] end
       *   tags?: null[]
       *   timeWillUsed?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = null
       * ```
       */
      post_api_content_videos_update<
        Config extends Alova2MethodConfig<null> & {
          data: VideoForEditDto
        }
      >(
        config: Config
      ): Alova2Method<null, 'techCenterApi.post_api_content_videos_update', Config>
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/content/posts/delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = null
       * ```
       */
      post_api_content_posts_delete<
        Config extends Alova2MethodConfig<null> & {
          data: DeletePostByIdRequest
        }
      >(
        config: Config
      ): Alova2Method<null, 'techCenterApi.post_api_content_posts_delete', Config>
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/content/videos/delete
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = null
       * ```
       */
      post_api_content_videos_delete<
        Config extends Alova2MethodConfig<null> & {
          data: DeleteVideoByIdRequest
        }
      >(
        config: Config
      ): Alova2Method<null, 'techCenterApi.post_api_content_videos_delete', Config>
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/fileResources/upload
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   file: Blob
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = null
       * ```
       */
      post_api_file_resources_upload<
        Config extends Alova2MethodConfig<null> & {
          data: {
            file: IFormFile
          }
        }
      >(
        config: Config
      ): Alova2Method<null, 'techCenterApi.post_api_file_resources_upload', Config>
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string
       * ```
       */
      get<Config extends Alova2MethodConfig<string>>(
        config?: Config
      ): Alova2Method<string, 'techCenterApi.get', Config>
    }
  }

  var Apis: Apis
}
